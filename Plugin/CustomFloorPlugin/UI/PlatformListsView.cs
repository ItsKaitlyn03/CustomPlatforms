using System;
using System.Collections.Generic;
using System.Collections.Specialized;

using BeatSaberMarkupLanguage.Attributes;
using BeatSaberMarkupLanguage.Components;
using BeatSaberMarkupLanguage.ViewControllers;

using CustomFloorPlugin.Configuration;
using CustomFloorPlugin.Helpers;

using HMUI;

using IPA.Utilities;

using Zenject;


namespace CustomFloorPlugin.UI
{
    /// <summary>
    /// A <see cref="BSMLAutomaticViewController"/> generated by SiraUtil and maintained by BSML at runtime.<br/>
    /// BSML uses the <see cref="ViewDefinitionAttribute"/> to determine the Layout of the GameObjects and their Components<br/>
    /// Tagged functions and variables from this class may be used/called by BSML if the .bsml file mentions them.<br/>
    /// </summary>
    [ViewDefinition("CustomFloorPlugin.Views.PlatformLists.bsml")]
    internal class PlatformListsView : BSMLAutomaticViewController, IInitializable, IDisposable
    {
        private PluginConfig? _config;
        private AssetLoader? _assetLoader;
        private PlatformManager? _platformManager;
        private PlatformSpawner? _platformSpawner;

        [UIComponent("singleplayer-platforms-list")]
        private readonly CustomListTableData? _singleplayerPlatformListTable = null;

        [UIComponent("multiplayer-platforms-list")]
        private readonly CustomListTableData? _multiplayerPlatformListTable = null;

        [UIComponent("a360-platforms-list")]
        private readonly CustomListTableData? _a360PlatformListTable = null;

        private readonly CustomCellComparer _customCellComparer = new();

        private CustomListTableData[]? _listTables;
        private ScrollView[]? _scrollViews;
        private int _currentTabIndex;

        [Inject]
        public void Construct(PluginConfig config, AssetLoader assetLoader, PlatformSpawner platformSpawner, PlatformManager platformManager)
        {
            _config = config;
            _assetLoader = assetLoader;
            _platformManager = platformManager;
            _platformSpawner = platformSpawner;
        }

        public void Initialize()
        {
            _platformManager!.AllPlatforms.CollectionChanged += OnCollectionDidChange;
        }

        public void Dispose()
        {
            _platformManager!.AllPlatforms.CollectionChanged -= OnCollectionDidChange;
        }

        /// <summary>
        /// Called when a tab is selected by the user<br/>
        /// Changes to the <see cref="CustomPlatform"/> of the selected game mode
        /// </summary>
        /// <param name="segmentedControl">Used to gather the cell index</param>
        /// <param name="_1">I love how optimised BSML is</param>
        [UIAction("select-tab")]
        // ReSharper disable once UnusedMember.Local
        // ReSharper disable once UnusedParameter.Local
        private void OnDidSelectTab(SegmentedControl segmentedControl, int _1)
        {
            _currentTabIndex = segmentedControl.selectedCellNumber;
            int index = GetPlatformIndexForTabIndex(_currentTabIndex);
            _listTables![segmentedControl.selectedCellNumber].tableView.ScrollToCellWithIdx(index, TableView.ScrollPositionType.Beginning, false);
            _listTables![segmentedControl.selectedCellNumber].tableView.SelectCellWithIdx(index, true);
        }

        /// <summary>
        /// Called when a <see cref="CustomPlatform"/> is selected by the user
        /// </summary>
        /// <param name="_1">I love how optimised BSML is</param>
        /// <param name="index">Cell index of the users selection</param>
        [UIAction("select-platform")]
        // ReSharper disable once UnusedMember.Local
        // ReSharper disable once UnusedParameter.Local
        private async void OnDidSelectPlatform(TableView _1, int index)
        {
            await _platformSpawner!.ChangeToPlatformAsync(_platformManager!.AllPlatforms[index]);
            switch (_currentTabIndex)
            {
                case 0:
                    _platformManager!.SingleplayerPlatform = _platformManager.ActivePlatform;
                    _config!.SingleplayerPlatformPath = _platformManager.ActivePlatform.fullPath;
                    break;
                case 1:
                    _platformManager!.MultiplayerPlatform = _platformManager.ActivePlatform;
                    _config!.MultiplayerPlatformPath = _platformManager.ActivePlatform.fullPath;
                    break;
                case 2:
                    _platformManager!.A360Platform = _platformManager.ActivePlatform;
                    _config!.A360PlatformPath = _platformManager.ActivePlatform.fullPath;
                    break;
            }
        }

        /// <summary>
        /// Changing to the current platform when the menu is shown<br/>
        /// [Called by Beat Saber]
        /// </summary>
        protected override void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling)
        {
            base.DidActivate(firstActivation, addedToHierarchy, screenSystemEnabling);
            CustomPlatform platform = GetPlatformForTabIndex(_currentTabIndex);
            _ = _platformSpawner!.ChangeToPlatformAsync(platform);
        }

        /// <summary>
        /// Swapping back to the standard menu environment or to the selected singleplayer platform when the menu is closed
        /// [Called by Beat Saber]
        /// </summary>
        protected override void DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling)
        {
            base.DidDeactivate(removedFromHierarchy, screenSystemDisabling);
            _ = _platformSpawner!.ChangeToPlatformAsync(_config!.ShowInMenu
                ? _config.ShufflePlatforms
                    ? _platformSpawner!.RandomPlatform
                    : _platformManager!.SingleplayerPlatform
                : _platformManager!.DefaultPlatform);
        }

        /// <summary>
        /// (Re-)Loading the tables for the ListView of available platforms
        /// [Called by BSML]
        /// </summary>
        [UIAction("#post-parse")]
        // ReSharper disable once UnusedMember.Local
        private void PostParse()
        {
            _listTables = new[] { _singleplayerPlatformListTable!, _multiplayerPlatformListTable!, _a360PlatformListTable! };
            _scrollViews = new ScrollView[_listTables.Length];
            foreach (CustomPlatform platform in _platformManager!.AllPlatforms)
                AddCellForPlatform(platform);
            for (int i = 0; i < _listTables.Length; i++)
            {
                int idx = GetPlatformIndexForTabIndex(i);
                _listTables[i].tableView.ReloadData();
                _listTables[i].tableView.ScrollToCellWithIdx(idx, TableView.ScrollPositionType.Beginning, false);
                _listTables[i].tableView.SelectCellWithIdx(idx);
                _scrollViews[i] = _listTables[i].tableView.GetField<ScrollView, TableView>("_scrollView");
            }
        }

        /// <summary>
        /// Called when a <see cref="CustomPlatform"/> was added to the list<br/>
        /// Adds or Removes the corresponding cells and refreshes the UI
        /// </summary>
        private void OnCollectionDidChange(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (_listTables is null) return;
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (CustomPlatform platform in e.NewItems)
                        AddCellForPlatform(platform);
                    RefreshListViews();
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (CustomPlatform platform in e.OldItems)
                        RemoveCellForPlatform(platform);
                    RefreshListViews();
                    break;
            }
        }

        /// <summary>
        /// Updates all <see cref="CustomListTableData"/>s
        /// </summary>
        private void RefreshListViews()
        {
            for (int i = 0; i < _listTables!.Length; i++)
            {
                float pos = _scrollViews![i].GetField<float, ScrollView>("_destinationPos");
                _listTables[i].tableView.ReloadData();
                _scrollViews[i].ScrollTo(pos, false);
            }
        }

        /// <summary>
        /// Adds a cell to the UI for the given <see cref="CustomPlatform"/>
        /// </summary>
        /// <param name="platform">The cell's platform to be added</param>
        private void AddCellForPlatform(CustomPlatform platform)
        {
            if (_listTables is null) return;
            CustomListTableData.CustomCellInfo cell = new(platform.platName, platform.platAuthor, platform.icon ? platform.icon : _assetLoader!.FallbackCover);
            foreach (CustomListTableData listTable in _listTables)
                listTable.data.AddSorted(1, listTable.data.Count - 1, cell, _customCellComparer);
        }

        /// <summary>
        /// Removes the cell from the UI for the given <see cref="CustomPlatform"/>
        /// </summary>
        /// <param name="platform">The cell's platform to be removed</param>
        private void RemoveCellForPlatform(CustomPlatform platform)
        {
            if (_listTables is null) return;
            int platformIndex = _platformManager!.AllPlatforms.IndexOf(platform);
            foreach (CustomListTableData listTable in _listTables)
            {
                listTable.data.RemoveAt(platformIndex);
                if (platform == GetPlatformForTabIndex(_currentTabIndex))
                {
                    listTable.tableView.SelectCellWithIdx(0);
                    listTable.tableView.ScrollToCellWithIdx(0, TableView.ScrollPositionType.Beginning, false);
                }
            }
        }

        private int GetPlatformIndexForTabIndex(int tabIndex)
        {
            CustomPlatform platform = GetPlatformForTabIndex(tabIndex);
            return _platformManager!.AllPlatforms.IndexOf(platform);
        }

        private CustomPlatform GetPlatformForTabIndex(int tabIndex)
        {
            return tabIndex switch
            {
                0 => _platformManager!.SingleplayerPlatform,
                1 => _platformManager!.MultiplayerPlatform,
                2 => _platformManager!.A360Platform,
                _ => _platformManager!.DefaultPlatform
            };
        }

        private class CustomCellComparer : IComparer<CustomListTableData.CustomCellInfo>
        {
            public int Compare(CustomListTableData.CustomCellInfo x, CustomListTableData.CustomCellInfo y)
            {
                if (x == y) return 0;
                int textComparison = string.CompareOrdinal(x.text, y.text);
                if (textComparison != 0) return textComparison;
                int subtextComparison = string.CompareOrdinal(x.subtext, y.subtext);
                return subtextComparison;
            }
        }
    }
}